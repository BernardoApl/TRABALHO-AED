#include <iostream>     // Biblioteca para operações de entrada e saída
#include <string>       // Biblioteca para manipulação de strings
#include <fstream>      // Biblioteca para manipulação de arquivos
#include <sstream>      // Biblioteca para manipulação de strings a partir de streams
#include <iomanip>      // Biblioteca para manipulação de entrada e saída formatada
#include <ctime>        // Biblioteca para manipulação de data e hora

class Hotel {
public:
    // Função para mostrar o menu principal e capturar a escolha do usuário
    void EscolheOpcao(int& o) {
        std::cout << "Seja muito Bem-Vindo \nSelecione uma das opções abaixo:\n(1) Clientes\n(2) Funcionário\n(3) Estadia\n(4) QuartosdoHotel\n(5) BaixarEstadias\n(0) Sair\n";
        std::cin >> o;
        switch (o) {
            case 1:
                Clientes(o);    // Chama a função para opções de Clientes
                break;
            case 2:
                Funcionarios(o);    // Chama a função para opções de Funcionário
                break;
            case 3:
                Estadia(o);    // Chama a função para opções de Estadia
                break;
            case 4:
                QuartosdoHotel(o);    // Chama a função para opções de QuartosdoHotel
                break;
            case 5:
                BaixarEstadias(o);    // Chama a função para BaixarEstadias
                break;
            case 0:
                std::cout << "Saindo...\n";    // Mensagem de saída
                break;
            default:
                std::cout << "Opção inválida. Tente novamente.\n";    // Mensagem para opção inválida
                EscolheOpcao(o);    // Rechama a função para escolher a opção
                break;
        }
    }

    // Função para opções de Clientes
    void Clientes(int& o) {
        std::cout << "Escolha uma opção para Clientes:\n(1) Cadastrar Clientes\n(2) Lista Clientess\n(0) Reiniciar\n";
        std::cin >> o;
        switch (o) {
            case 1:
                CadastrarClientes();    // Chama a função para cadastrar cliente
                break;
            case 2:
                ListaClientess();    // Chama a função para listar clientes
                break;
            case 0:
                EscolheOpcao(o);    // Volta ao menu principal
                break;
            default:
                std::cout << "Opção inválida. Tente novamente.\n";    // Mensagem para opção inválida
                Clientes(o);    // Rechama a função para opções de cliente
                break;
        }
    }

    // Função para cadastrar cliente
    void CadastrarClientes() {
        std::string nome, telefone, email;
        std::cout << "Nome do Clientes: ";
        std::cin.ignore();
        std::getline(std::cin, nome);
        std::cout << "Telefone do Clientes: ";
        std::getline(std::cin, telefone);
        std::cout << "Email do Clientes: ";
        std::getline(std::cin, email);

        std::ofstream arquivo("clientes.txt", std::ios::app);    // Abre o arquivo de clientes para acrescentar
        arquivo << nome << "," << telefone << "," << email << "\n";    // Escreve os dados do cliente no arquivo
        arquivo.close();

        std::cout << "Clientes cadastrado com sucesso!\n";
        int opcao;
        Clientes(opcao);    // Volta ao menu de cliente
    }

    // Função para listar clientes
    void ListaClientess() {
        std::ifstream arquivo("clientes.txt");    // Abre o arquivo de clientes para leitura
        std::string linha;
        std::cout << "Lista de Clientess:\n";
        while (std::getline(arquivo, linha)) {
            std::istringstream stream(linha);
            std::string nome, telefone, email;
            std::getline(stream, nome, ',');
            std::getline(stream, telefone, ',');
            std::getline(stream, email, ',');

            std::cout << "Nome: " << nome << ", Telefone: " << telefone << ", Email: " << email << "\n";
        }
        arquivo.close();

        int opcao;
        Clientes(opcao);    // Volta ao menu de cliente
    }

    // Função para opções de Funcionário
    void Funcionarios(int& o) {
        std::cout << "Escolha uma opção para Funcionário:\n(1) Cadastrar Funcionário\n(2) Lista Funcionários\n(0) Reiniciar\n";
        std::cin >> o;
        switch (o) {
            case 1:
                CadastrarFuncionarios();    // Chama a função para cadastrar funcionário
                break;
            case 2:
                ListaFuncionarioss();    // Chama a função para listar funcionários
                break;
            case 0:
                EscolheOpcao(o);    // Volta ao menu principal
                break;
            default:
                std::cout << "Opção inválida. Tente novamente.\n";    // Mensagem para opção inválida
                Funcionarios(o);    // Rechama a função para opções de funcionário
                break;
        }
    }

    // Função para cadastrar funcionário
    void CadastrarFuncionarios() {
        std::string nome, cargo, telefone;
        std::cout << "Nome do Funcionário: ";
        std::cin.ignore();
        std::getline(std::cin, nome);
        std::cout << "Cargo do Funcionário: ";
        std::getline(std::cin, cargo);
        std::cout << "Telefone do Funcionário: ";
        std::getline(std::cin, telefone);

        std::ofstream arquivo("funcionarios.txt", std::ios::app);    // Abre o arquivo de funcionários para acrescentar
        arquivo << nome << "," << cargo << "," << telefone << "\n";    // Escreve os dados do funcionário no arquivo
        arquivo.close();

        std::cout << "Funcionário cadastrado com sucesso!\n";
        int opcao;
        Funcionarios(opcao);    // Volta ao menu de funcionário
    }

    // Função para listar funcionários
    void ListaFuncionarioss() {
        std::ifstream arquivo("funcionarios.txt");    // Abre o arquivo de funcionários para leitura
        std::string linha;
        std::cout << "Lista de Funcionários:\n";
        while (std::getline(arquivo, linha)) {
            std::istringstream stream(linha);
            std::string nome, cargo, telefone;
            std::getline(stream, nome, ',');
            std::getline(stream, cargo, ',');
            std::getline(stream, telefone, ',');

            std::cout << "Nome: " << nome << ", Cargo: " << cargo << ", Telefone: " << telefone << "\n";
        }
        arquivo.close();

        int opcao;
        Funcionarios(opcao);    // Volta ao menu de funcionário
    }

    // Função para opções de Estadia
    void Estadia(int& o) {
        std::cout << "Escolha uma opção para Estadia:\n(1) Registrar Estadia\n(2) Lista Estadias\n(0) Reiniciar\n";
        std::cin >> o;
        switch (o) {
            case 1:
                RegistrarEstadia();    // Chama a função para registrar estadia
                break;
            case 2:
                ListaEstadias();    // Chama a função para listar estadias
                break;
            case 0:
                EscolheOpcao(o);    // Volta ao menu principal
                break;
            default:
                std::cout << "Opção inválida. Tente novamente.\n";    // Mensagem para opção inválida
                Estadia(o);    // Rechama a função para opções de estadia
                break;
        }
    }

    // Função para registrar estadia
    void RegistrarEstadia() {
        std::string cliente, quarto;
        std::time_t t = std::time(0);
        std::tm* now = std::localtime(&t);

        std::cout << "Nome do Clientes: ";
        std::cin.ignore();
        std::getline(std::cin, cliente);
        std::cout << "Número do QuartosdoHotel: ";
        std::getline(std::cin, quarto);

        std::ofstream arquivo("estadias.txt", std::ios::app);    // Abre o arquivo de estadias para acrescentar
        arquivo << cliente << "," << quarto << "," 
                << (now->tm_year + 1900) << '-' 
                << (now->tm_mon + 1) << '-' 
                << now->tm_mday << "\n";    // Escreve os dados da estadia no arquivo
        arquivo.close();

        std::cout << "Estadia registrada com sucesso!\n";
        int opcao;
        Estadia(opcao);    // Volta ao menu de estadia
    }

    // Função para listar estadias
    void ListaEstadias() {
        std::ifstream arquivo("estadias.txt");    // Abre o arquivo de estadias para leitura
        std::string linha;
        std::cout << "Lista de Estadias:\n";
        while (std::getline(arquivo, linha)) {
            std::istringstream stream(linha);
            std::string cliente, quarto, data;
            std::getline(stream, cliente, ',');
            std::getline(stream, quarto, ',');
            std::getline(stream, data, ',');

            std::cout << "Clientes: " << cliente << ", QuartosdoHotel: " << quarto << ", Data: " << data << "\n";
        }
        arquivo.close();

        int opcao;
        Estadia(opcao);    // Volta ao menu de estadia
    }

    // Função para opções de QuartosdoHotel
    void QuartosdoHotel(int& o) {
        std::cout << "Escolha uma opção para QuartosdoHotel:\n(1) Cadastrar QuartosdoHotel\n(2) Lista QuartosdoHotels\n(0) Reiniciar\n";
        std::cin >> o;
        switch (o) {
            case 1:
                CadastrarQuartosdoHotel();    // Chama a função para cadastrar quarto
                break;
            case 2:
                ListaQuartosdoHotels();    // Chama a função para listar quartos
                break;
            case 0:
                EscolheOpcao(o);    // Volta ao menu principal
                break;
            default:
                std::cout << "Opção inválida. Tente novamente.\n";    // Mensagem para opção inválida
                QuartosdoHotel(o);    // Rechama a função para opções de quarto
                break;
        }
    }

    // Função para cadastrar quarto
    void CadastrarQuartosdoHotel() {
        std::string numero, tipo;
        double preco;
        std::cout << "Número do QuartosdoHotel: ";
        std::cin.ignore();
        std::getline(std::cin, numero);
        std::cout << "Tipo do QuartosdoHotel: ";
        std::getline(std::cin, tipo);
        std::cout << "Preço do QuartosdoHotel: ";
        std::cin >> preco;

        std::ofstream arquivo("quartos.txt", std::ios::app);    // Abre o arquivo de quartos para acrescentar
        arquivo << numero << "," << tipo << "," << preco << "\n";    // Escreve os dados do quarto no arquivo
        arquivo.close();

        std::cout << "QuartosdoHotel cadastrado com sucesso!\n";
        int opcao;
        QuartosdoHotel(opcao);    // Volta ao menu de quarto
    }

    // Função para listar quartos
    void ListaQuartosdoHotels() {
        std::ifstream arquivo("quartos.txt");    // Abre o arquivo de quartos para leitura
        std::string linha;
        std::cout << "Lista de QuartosdoHotels:\n";
        while (std::getline(arquivo, linha)) {
            std::istringstream stream(linha);
            std::string numero, tipo;
            double preco;
            std::getline(stream, numero, ',');
            std::getline(stream, tipo, ',');
            stream >> preco;

            std::cout << "Número: " << numero << ", Tipo: " << tipo << ", Preço: " << preco << "\n";
        }
        arquivo.close();

        int opcao;
        QuartosdoHotel(opcao);    // Volta ao menu de quarto
    }

    // Função para BaixarEstadias
    void BaixarEstadias(int& o) {
        std::cout << "Escolha uma opção para BaixarEstadias:\n(1) Realizar BaixarEstadias\n(2) Lista BaixarEstadiass\n(0) Reiniciar\n";
        std::cin >> o;
        switch (o) {
            case 1:
                RealizarBaixarEstadias();    // Chama a função para realizar checkout
                break;
            case 2:
                ListaBaixarEstadiass();    // Chama a função para listar checkouts
                break;
            case 0:
                EscolheOpcao(o);    // Volta ao menu principal
                break;
            default:
                std::cout << "Opção inválida. Tente novamente.\n";    // Mensagem para opção inválida
                BaixarEstadias(o);    // Rechama a função para opções de checkout
                break;
        }
    }

    // Função para realizar checkout
    void RealizarBaixarEstadias() {
        std::string cliente, quarto;
        std::cout << "Nome do Clientes: ";
        std::cin.ignore();
        std::getline(std::cin, cliente);
        std::cout << "Número do QuartosdoHotel: ";
        std::getline(std::cin, quarto);

        std::ofstream arquivo("checkouts.txt", std::ios::app);    // Abre o arquivo de checkouts para acrescentar
        arquivo << cliente << "," << quarto << "\n";    // Escreve os dados do checkout no arquivo
        arquivo.close();

        std::cout << "BaixarEstadias realizado com sucesso!\n";
        int opcao;
        BaixarEstadias(opcao);    // Volta ao menu de checkout
    }

    // Função para listar checkouts
    void ListaBaixarEstadiass() {
        std::ifstream arquivo("checkouts.txt");    // Abre o arquivo de checkouts para leitura
        std::string linha;
        std::cout << "Lista de BaixarEstadiass:\n";
        while (std::getline(arquivo, linha)) {
            std::istringstream stream(linha);
            std::string cliente, quarto;
            std::getline(stream, cliente, ',');
            std::getline(stream, quarto, ',');

            std::cout << "Clientes: " << cliente << ", QuartosdoHotel: " << quarto << "\n";
        }
        arquivo.close();

        int opcao;
        BaixarEstadias(opcao);    // Volta ao menu de checkout
    }
};

int main() {
    Hotel hotel;
    int opcao;
    hotel.EscolheOpcao(opcao);    // Chama a função para escolher a opção do menu principal
    return 0;
}
